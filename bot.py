from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, FSInputFile, BufferedInputFile, InputMediaDocument, InputMediaPhoto, InputMediaVideo
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, ADMIN_ID
from database.models import Order, Task, SubmittedFile
from database import setup
from collections import defaultdict
from tortoise import fields, models
from datetime import datetime

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class OrderForm(StatesGroup):
    title = State()
    description = State()

class ProjectForm(StatesGroup):
    title = State()
    description = State()

class SubmitWorkForm(StatesGroup):
    select_project = State()
    select_task = State()
    upload_files = State()
    confirm = State()

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
class AdminRejectTaskForm(StatesGroup):
    reason = State()

TASK_TYPE_MAP = {
    'script': '–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è',
    'voice': '–û–∑–≤—É—á–∫–∞',
    'edit': '–ú–æ–Ω—Ç–∞–∂',
    'preview': '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é',
    'upload': '–û—Ç–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ',
}

@dp.message(CommandStart())
async def cmd_start(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ü—Ä–æ–µ–∫—Ç—ã")],
            [KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton(text="üì§ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É")]
        ],
        resize_keyboard=True
    )
    await message.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeamReelBot!\n\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏.\n\n–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin",
        reply_markup=keyboard
    )

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if str(message.from_user.id) not in ADMIN_ID:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="new_order")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_tasks")],
            [InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", callback_data="admin_completed_tasks_start")]
        ]
    )
    await message.reply("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=keyboard)

@dp.message(lambda message: message.text == "üìã –ü—Ä–æ–µ–∫—Ç—ã")
async def show_projects(message: Message):
    orders = await Order.all()
    if not orders:
        await message.reply("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=order.title, callback_data=f"order_{order.id}")] 
            for order in orders
        ]
    )
    
    await message.reply("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("order_"))
async def show_order_info(callback_query: CallbackQuery):
    order_id = int(callback_query.data.split("_")[1])
    order = await Order.get(id=order_id)
    
    # –ö–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á
    task_types = [
        ('script', '–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è'),
        ('voice', '–û–∑–≤—É—á–∫–∞'),
        ('edit', '–ú–æ–Ω—Ç–∞–∂'),
        ('preview', '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é'),
        ('upload', '–û—Ç–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ')
    ]
    
    task_buttons = []
    for key, text in task_types:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        existing_task = await Task.filter(order_id=order_id, task_type=text).first()
        button_text = text
        if existing_task:
            button_text += " (–ó–∞–Ω—è—Ç–æ)"
        task_buttons.append(InlineKeyboardButton(text=button_text, callback_data=f"task_{key}_{order_id}"))

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [btn] for btn in task_buttons
        ] + [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_projects")]]
    )
    
    await callback_query.message.edit_text(
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {order.title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
        f"–°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%d.%m.%Y')}",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "back_to_projects")
async def back_to_projects(callback_query: CallbackQuery):
    orders = await Order.all()
    if not orders:
        await callback_query.message.edit_text("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=order.title, callback_data=f"order_{order.id}")] 
            for order in orders
        ]
    )
    
    await callback_query.message.edit_text("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "new_order")
async def process_new_order(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    await state.set_state(OrderForm.title)

@dp.message(OrderForm.title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    await state.set_state(OrderForm.description)

@dp.message(OrderForm.description)
async def process_description(message: Message, state: FSMContext):
    data = await state.get_data()
    
    order = await Order.create(
        title=data["title"],
        description=message.text
    )
    
    await message.reply(f"–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {order.title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {order.description}")
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("task_"))
async def take_task(callback_query: CallbackQuery):
    parts = callback_query.data.split('_')
    task_type_key = parts[1]
    order_id = int(parts[2])
    user_id = str(callback_query.from_user.id)
    task_type = TASK_TYPE_MAP.get(task_type_key, task_type_key)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è–ª –ª–∏ —É–∂–µ –∫—Ç–æ-—Ç–æ —ç—Ç—É –∑–∞–¥–∞—á—É –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É
    existing = await Task.filter(order_id=order_id, task_type=task_type).first()
    if existing:
        if existing.user_id == user_id:
            await callback_query.answer("–í—ã —É–∂–µ –≤–∑—è–ª–∏—Å—å –∑–∞ —ç—Ç—É –∑–∞–¥–∞—á—É", show_alert=True)
        else:
            await callback_query.answer("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", show_alert=True)
        return
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    await Task.create(order_id=order_id, user_id=user_id, task_type=task_type)
    await callback_query.answer(f"–í—ã –≤–∑—è–ª–∏—Å—å –∑–∞: {task_type}", show_alert=True)

@dp.message(lambda message: message.text == "üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def my_tasks(message: Message):
    user_id = str(message.from_user.id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    tasks = await Task.filter(user_id=user_id).prefetch_related('order')
    if not tasks:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
    project_tasks_info = defaultdict(list) # {project_title: [(task_type, status)]}
    for task in tasks:
        project_tasks_info[task.order.title].append((task.task_type, task.status))
    
    text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for project, task_list in project_tasks_info.items():
        text += f"–ü—Ä–æ–µ–∫—Ç: <b>{project}</b>\n"
        for task_type, status in task_list:
            status_text = ""
            if status == 'approved':
                status_text = " (–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ)"
            elif status == 'rejected':
                status_text = " (–¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ ‚ùå)"
            # –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ 'pending' –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º
                
            text += f"  - {task_type}{status_text}\n"
        text += "\n"
        
    await message.reply(text, parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "admin_tasks")
async def admin_tasks(callback_query: CallbackQuery):
    tasks = await Task.all().prefetch_related('order')
    if not tasks:
        await callback_query.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    project_tasks = defaultdict(list)
    for task in tasks:
        project_tasks[task.order.title].append((task.task_type, task.user_id))
    text = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for project, task_list in project_tasks.items():
        text += f"–ü—Ä–æ–µ–∫—Ç: <b>{project}</b>\n"
        for task_type, user_id in task_list:
            text += f"{task_type}: <a href=\"tg://user?id={user_id}\">{user_id}</a>\n"
        text += "\n"
    await callback_query.message.edit_text(text, parse_mode="HTML")

@dp.message(lambda message: message.text == "üì§ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É")
async def submit_work_start(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –æ–¥–æ–±—Ä–µ–Ω—ã
    tasks = await Task.filter(user_id=user_id, status__not='approved').prefetch_related('order')

    if not tasks:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–¥–∞—á–∏ —Ä–∞–±–æ—Ç—ã (–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω—ã).")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
    projects = {task.order.id: task.order.title for task in tasks}
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=title, callback_data=f"submit_proj_{proj_id}")]
            for proj_id, title in projects.items()
        ]
    )
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=keyboard)
    await state.set_state(SubmitWorkForm.select_project)
    await state.update_data(tasks=[{'id': t.id, 'order_id': t.order.id, 'order_title': t.order.title, 'task_type': t.task_type} for t in tasks])

@dp.callback_query(lambda c: c.data.startswith("submit_proj_"), SubmitWorkForm.select_project)
async def submit_work_select_project(callback_query: CallbackQuery, state: FSMContext):
    project_id = int(callback_query.data.split("_")[-1])
    data = await state.get_data()
    user_tasks = [t for t in data['tasks'] if t['order_id'] == project_id]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=t['task_type'], callback_data=f"submit_task_{t['id']}")]
            for t in user_tasks
        ]
    )
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:", reply_markup=keyboard)
    await state.set_state(SubmitWorkForm.select_task)
    await state.update_data(selected_project=project_id)

@dp.callback_query(lambda c: c.data.startswith("submit_task_"), SubmitWorkForm.select_task)
async def submit_work_select_task(callback_query: CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split("_")[-1])
    await state.update_data(selected_task=task_id, files=[])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ù–∞–∑–∞–¥
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="submit_confirm")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="submit_back_to_tasks")] # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
        ]
    )

    await callback_query.message.edit_text(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'."
    )
    await callback_query.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ:", reply_markup=keyboard)
    await state.set_state(SubmitWorkForm.upload_files)

@dp.message(SubmitWorkForm.upload_files, F.content_type.in_(["document", "photo", "video"]))
async def submit_work_upload_file(message: Message, state: FSMContext):
    data = await state.get_data()
    files = data.get('files', [])
    file_info = None
    if message.document:
        file_info = {'file_id': message.document.file_id, 'type': 'document'}
    elif message.photo:
        # –î–ª—è —Ñ–æ—Ç–æ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤, —Ç.–∫. –æ–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
        file_info = {'file_id': message.photo[-1].file_id, 'type': 'photo'}
    elif message.video:
        file_info = {'file_id': message.video.file_id, 'type': 'video'}
    
    if file_info:
        files.append(file_info)
        await state.update_data(files=files)
        await message.reply("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'.")
    else:
         # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–∞ F, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.
         await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")

@dp.callback_query(lambda c: c.data == "submit_confirm", SubmitWorkForm.upload_files)
async def submit_work_confirm(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    files_to_save = data.get('files', [])
    task_id = data.get('selected_task')

    if not files_to_save:
        await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
    task = await Task.get(id=task_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    saved_count = 0
    for file_info in files_to_save:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ
        existing_file = await SubmittedFile.filter(task=task, file_id=file_info['file_id']).first()
        if not existing_file:
            await SubmittedFile.create(
                task=task,
                file_id=file_info['file_id'],
                file_type=file_info['type']
            )
            saved_count += 1

    if saved_count > 0:
        await callback_query.message.edit_text(f"–†–∞–±–æ—Ç–∞ ({saved_count} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª(–∞/–æ–≤)) –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ –∑–∞–¥–∞—á–µ.\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
         await callback_query.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–∂–µ –±—ã–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ.")
         
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

@dp.callback_query(lambda c: c.data == "admin_completed_tasks_start")
async def admin_completed_tasks_start(callback_query: CallbackQuery):
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    tasks_with_files = await Task.filter(submitted_files__isnull=False).distinct().prefetch_related('order')
    
    if not tasks_with_files:
        await callback_query.message.edit_text("–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
    projects = {}
    for task in tasks_with_files:
        if task.order.id not in projects:
            projects[task.order.id] = task.order.title
            
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=title, callback_data=f"admin_completed_proj_{proj_id}")]
            for proj_id, title in projects.items()
        ]
    )
    
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:", reply_markup=keyboard)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç—É
async def display_completed_tasks_for_project(message, project_id):
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    tasks_with_files = await Task.filter(order_id=project_id, submitted_files__isnull=False).distinct().prefetch_related('order')
    
    if not tasks_with_files:
        await message.edit_text("–í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.")
        return
    
    project_title = tasks_with_files[0].order.title # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–¥–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    
    text = f"–ó–∞–¥–∞—á–∏ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ \"{project_title}\"\n\n"
    keyboard_buttons = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø—É –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (—Ç.–µ. —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏)
    unique_tasks = defaultdict(dict) # {user_id: {task_type: task_object}}
    for task in tasks_with_files:
        unique_tasks[task.user_id][task.task_type] = task

    for user_id, tasks_by_type in unique_tasks.items():
        user_link = f"<a href=\"tg://user?id={user_id}\">{user_id}</a>"
        text += f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {user_link}\n"
        for task_type, task in tasks_by_type.items():
            status_text = {
                'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è ‚è≥',
                'approved': '–û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ',
                'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚ùå'
            }.get(task.status, task.status) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
            
            text += f"  - {task_type} ({status_text})\n"
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard_buttons.append(
                [InlineKeyboardButton(text=f"üìÇ –§–∞–π–ª—ã {task_type} –æ—Ç {user_id}", callback_data=f"admin_view_task_files_{task.id}")]
            )
        text += "\n"
    
    keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="admin_completed_tasks_start")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@dp.callback_query(lambda c: c.data.startswith("admin_completed_proj_"))
async def admin_completed_tasks_select_project(callback_query: CallbackQuery):
    project_id = int(callback_query.data.split("_")[-1])
    await display_completed_tasks_for_project(callback_query.message, project_id)

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
@dp.callback_query(lambda c: c.data.startswith("admin_view_task_files_"))
async def admin_view_task_files(callback_query: CallbackQuery):
    task_id = int(callback_query.data.split("_")[-1])
    
    task = await Task.get(id=task_id).prefetch_related('submitted_files', 'order')
    
    if not task.submitted_files:
        await callback_query.answer("–î–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.", show_alert=True)
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
        await display_completed_tasks_for_project(callback_query.message, task.order.id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        return
        
    await callback_query.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏...", show_alert=True)
    
    media_group_items = []
    document_items = []
    
    project_title = task.order.title
    caption_text = f"–§–∞–π–ª—ã –¥–ª—è –∑–∞–¥–∞—á–∏ \"{task.task_type}\" –≤ –ø—Ä–æ–µ–∫—Ç–µ \"{project_title}\" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href=\"tg://user?id={task.user_id}\">{task.user_id}</a>"

    for file_info in task.submitted_files:
        if file_info.file_type == 'photo':
            media_group_items.append(InputMediaPhoto(media=file_info.file_id))
        elif file_info.file_type == 'video':
            media_group_items.append(InputMediaVideo(media=file_info.file_id))
        elif file_info.file_type == 'document':
            document_items.append(file_info.file_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    if media_group_items:
        # –ü–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å
        media_group_items[0].caption = caption_text
        media_group_items[0].parse_mode = "HTML"
        await bot.send_media_group(callback_query.message.chat.id, media_group_items)
        
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    for doc_file_id in document_items:
        await bot.send_document(callback_query.message.chat.id, doc_file_id)
        
    # –ö–Ω–æ–ø–∫–∏ –û–¥–æ–±—Ä–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
    approve_reject_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_task_{task.id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_task_{task.id}")]
        ]
    )
    await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ:", reply_markup=approve_reject_keyboard)

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.callback_query(lambda c: c.data.startswith("admin_approve_task_"))
async def admin_approve_task(callback_query: CallbackQuery):
    task_id = int(callback_query.data.split("_")[-1])
    
    task = await Task.get(id=task_id).prefetch_related('order')
    task.status = 'approved'
    # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å is_completed –≤ True, –µ—Å–ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    task.is_completed = True
    await task.save()
    
    await callback_query.answer("–ó–∞–¥–∞—á–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!", show_alert=True)
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ –∑–∞–¥–∞—á–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
    try:
        await bot.send_message(int(task.user_id), f"‚úÖ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ '{task.task_type}' –≤ –ø—Ä–æ–µ–∫—Ç–µ '{task.order.title}' –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task.user_id}: {e}")
        
    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
    await display_completed_tasks_for_project(callback_query.message, task.order.id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.callback_query(lambda c: c.data.startswith("admin_reject_task_"))
async def admin_reject_task(callback_query: CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split("_")[-1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(reject_task_id=task_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="admin_reject_skip")
    back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_reject_back_{task_id}")
    approve_reject_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [keyboard],
            [back_button]
        ]
    )
    
    await callback_query.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:",
        reply_markup=approve_reject_keyboard
    )
    await state.set_state(AdminRejectTaskForm.reason)

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
@dp.message(AdminRejectTaskForm.reason)
async def process_reject_reason(message: Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get('reject_task_id')
    reject_reason = message.text

    if not task_id:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
        await state.clear()
        return

    task = await Task.get(id=task_id).prefetch_related('order')
    task.status = 'rejected'
    task.is_completed = False # –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
    await task.save()
    
    await message.reply("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ –∑–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã
    try:
        await bot.send_message(int(task.user_id), 
            f"‚ùå –í–∞—à–∞ –∑–∞–¥–∞—á–∞ '{task.task_type}' –≤ –ø—Ä–æ–µ–∫—Ç–µ '{task.order.title}' –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reject_reason}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–Ω–µ—Å–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è." # –ò–ª–∏ –¥—Ä—É–≥–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task.user_id}: {e}")
        
    await state.clear()
    
    # –ü–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
    return_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞—á–∞–º –ø—Ä–æ–µ–∫—Ç–∞", callback_data=f"admin_completed_proj_{task.order.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")]
        ]
    )
    await message.answer("–î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=return_keyboard)

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
@dp.callback_query(lambda c: c.data == "admin_reject_skip", AdminRejectTaskForm.reason)
async def admin_reject_skip(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    task_id = data.get('reject_task_id')

    if not task_id:
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.")
        await state.clear()
        return
    
    task = await Task.get(id=task_id).prefetch_related('order')
    task.status = 'rejected'
    task.is_completed = False
    await task.save()
    
    await callback_query.message.edit_text("–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    try:
        await bot.send_message(int(task.user_id), f"‚ùå –í–∞—à–∞ –∑–∞–¥–∞—á–∞ '{task.task_type}' –≤ –ø—Ä–æ–µ–∫—Ç–µ '{task.order.title}' –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task.user_id}: {e}")
        
    await state.clear()
    
    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
    return_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–¥–∞—á–∞–º –ø—Ä–æ–µ–∫—Ç–∞", callback_data=f"admin_completed_proj_{task.order.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")]
        ]
    )
    await callback_query.message.answer("–î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=return_keyboard)

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤
@dp.callback_query(lambda c: c.data == "submit_back_to_tasks", SubmitWorkForm.upload_files)
async def submit_back_to_tasks(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    project_id = data.get('selected_project')
    tasks = data.get('tasks') # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    if not project_id or not tasks:
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ '–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É'.")
        await state.clear()
        await callback_query.answer()
        return

    user_tasks = [t for t in tasks if t['order_id'] == project_id]
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=t['task_type'], callback_data=f"submit_task_{t['id']}")]
            for t in user_tasks
        ]
    )
    
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:", reply_markup=keyboard)
    await state.set_state(SubmitWorkForm.select_task) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
    await callback_query.answer() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

async def start_bot():
    await setup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(start_bot())